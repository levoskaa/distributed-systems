/*
* generated by Xtext 2.25.0
*/
package hu.bme.aut.statechartdsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import hu.bme.aut.statechartdsl.statechartDSL.State
import hu.bme.aut.statechartdsl.statechartDSL.PreDecrementExpression
import hu.bme.aut.statechartdsl.statechartDSL.MinusEqualsExpression
import hu.bme.aut.statechartdsl.statechartDSL.PlusEqualsExpression
import hu.bme.aut.statechartdsl.statechartDSL.PreIncrementExpression

/**
* Generates code from your model files on save.
*
* See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
*/
class StatechartDSLGenerator extends AbstractGenerator {
	
	override doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile('/DEFAULT_ARTIFACT', generate(resource));
	}
	
	def generate(Resource resource)
	'''«generateAbstractStateClass»«generateStateClasses(resource)»«generateStatechartClass(resource)»'''
	
	def generateAbstractStateClass() '''
	abstract class AbstractState {
		Statechart statechart;
	
		public AbstractState(Statechart stateChart) {
			this.statechart = statechart;
		}
		
		public abstract void executeEntryActions();
		private abstract void executeExitActions();
	}
	'''
	
	def generateStateClasses(Resource resource) '''
	«FOR state : resource.allContents.filter(typeof(State)).toIterable()»
	class «state.generateClassName» extends AbstractState {
		public «state.generateClassName»(Statechart statechart) {
			super(statechart);
		}
		
		@Override
		public void executeEntryActions() {
			«FOR action : state.entryActions»
			«action.generateArithmeticExpression»;
			«ENDFOR»
		}
		
		@Override
		private void executeExitActions() {
			«FOR action : state.exitActions»
			«action.generateArithmeticExpression»;
			«ENDFOR»
		}
		
		«FOR transition : state.transitions»
		void «toLowercaseFirstLetter(transition.event)»() {
			«FOR action : transition.actions»
			«action.generateArithmeticExpression»;
			«ENDFOR»
			executeExitActions();
			statechart.setState(statechart.«generateVariableName(transition.targetState.name)»);
		}
		
		«ENDFOR»
	}
	«ENDFOR»
	'''
	
	def generateStatechartClass(Resource resource) '''
	public class Statechart {
		AbstractState currentState;		
		«FOR state : resource.allContents.filter(typeof(State)).toIterable()»
		public «state.generateClassName» «generateVariableName(state.name)»;
		«ENDFOR»
		
		StateChart() {
			«FOR state : resource.allContents.filter(typeof(State)).toIterable()»
			«generateVariableName(state.name)» = new «state.generateClassName»(this);
			«ENDFOR»
		}
		
		void setState(AbstractState state) {
			currentState = state;
			state.executeEntryActions();
		}
	}
	'''

	def dispatch generateArithmeticExpression(MinusEqualsExpression expression)
	'''«expression.lhs» -= «expression.rhs»'''
	
	def dispatch generateArithmeticExpression(PlusEqualsExpression expression)
	'''«expression.lhs» += «expression.rhs»'''
	
	def dispatch generateArithmeticExpression(PreDecrementExpression expression)
	'''--«expression.operand»'''
	
	def dispatch generateArithmeticExpression(PreIncrementExpression expression)
	'''++«expression.operand»'''
	
	def generateClassName(State state)
	'''«toUppercaseFirstLetter(state.name)»'''
	
	def generateVariableName(String stateName)
	'''«toLowercaseFirstLetter(stateName) + 'State'»'''
	
	def String toUppercaseFirstLetter(String name) {
		if (name === null || name.length == 0) {
			return ""
		}
		if (name.length == 1) {
			return name.substring(0, 1).toUpperCase()
		}
		return name.substring(0, 1).toUpperCase() + name.substring(1)
	}
	
	def String toLowercaseFirstLetter(String name) {
		if (name === null || name.length == 0) {
			return ""
		}
		if (name.length == 1) {
			return name.substring(0, 1).toLowerCase()
		}
		return name.substring(0, 1).toLowerCase() + name.substring(1)
	}
}