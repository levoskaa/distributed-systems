package SolidMaker.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class Sphere_Constraints extends BaseConstraintsDescriptor {
  public Sphere_Constraints() {
    super(CONCEPTS.Sphere$Tg);
  }

  public static class Radius_Property extends BasePropertyConstraintsDescriptor {
    public Radius_Property(ConstraintsDescriptor container) {
      super(PROPS.radius$4nLQ, container);
    }
    @Override
    public boolean hasOwnValidator() {
      return true;
    }
    private static final SNodePointer validatePropertyBreakingPoint = new SNodePointer("r:06e56007-2bfc-4f17-a0c3-060a6cf68268(SolidMaker.constraints)", "3483371911648160544");
    @Override
    public boolean validateValue(SNode node, Object propertyValue, CheckingNodeContext checkingNodeContext) {
      boolean result = staticValidateProperty(node, SPropertyOperations.castInteger(propertyValue));
      if (!(result) && checkingNodeContext != null) {
        checkingNodeContext.setBreakingNode(validatePropertyBreakingPoint);
      }
      return result;
    }
    private static boolean staticValidateProperty(SNode node, int propertyValue) {
      return propertyValue >= 0;
    }
  }
  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(PROPS.radius$4nLQ, new Radius_Property(this));
    return properties;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Sphere$Tg = MetaAdapterFactory.getConcept(0xf20fa6ad2c4f467eL, 0xac8800277ef9754aL, 0x4354e39751afc636L, "SolidMaker.structure.Sphere");
  }

  private static final class PROPS {
    /*package*/ static final SProperty radius$4nLQ = MetaAdapterFactory.getProperty(0xf20fa6ad2c4f467eL, 0xac8800277ef9754aL, 0x4354e39751afc636L, 0x4354e39751afc637L, "radius");
  }
}
